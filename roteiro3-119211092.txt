--Roteiro 3:

--Questões :
--1. Ok

CREATE TABLE farmacia(
    id_farmacia INTEGER PRIMARY KEY,
    bairro TEXT,
    cidade TEXT,
    estado VARCHAR(2),
    tipo VARCHAR(1),
    gerente VARCHAR(11),

    UNIQUE(id_farmacia, gerente)
);

--Tipo de farmacia pode ser: F = Filial e S = Sede.
ALTER TABLE farmacia ADD CONSTRAINT check_tipo  CHECK (tipo IN('F' , 'S'));


--2. Ok

CREATE TABLE funcionarios(
    cpf_funcionario VARCHAR (11) PRIMARY KEY,
    cargo VARCHAR(1) NOT NULL,
    lotacao INTEGER,

    UNIQUE(lotacao)
);

--Cargo pode ser: F = farmaceutico, V = vendedor, E = entregador, C = caixa e A = administrador.
ALTER TABLE funcionarios ADD CONSTRAINT check_cargo CHECK (cargo IN('F','V', 'E', 'C', 'A'));


--3. Ok

--Funcionario só pode está lotado a uma unica farmacia.
ALTER TABLE funcionarios ADD CONSTRAINT fu_lotacao FOREIGN KEY (lotacao) REFERENCES farmacia(id_farmacia);
ALTER TABLE funcionarios ADD CONSTRAINT unico_lotacao UNIQUE(lotacao);


--4. Ok

--Cada farmácia tem apenas um gerente que é um funcionario.
ALTER TABLE funcionarios ADD CONSTRAINT fk_gerente FOREIGN KEY (gerente) REFERENCES funcionarios(cpf_funcionario);
ALTER TABLE farmacia ADD CONSTRAINT unico_gerente UNIQUE(gerente);


--5. Ok

ALTER TABLE funcionarios ALTER COLUMN lotacao DROP NOT NULL;


--6. Ok

CREATE TABLE clientes (
    cpf_cliente VARCHAR(11) PRIMARY KEY,
    idade INTEGER, 
);

--Adiantei o ponto 13.
ALTER TABLE clientes ADD CONSTRAINT check_idade CHECK(idade >= 18);

--Irei criar um tabela de endereções vinculados a um cliente.

CREATE TABLE cliente_endereco (
    id_endereco SERIAL PRIMARY KEY, -- Identificador único para cada endereço
    cpf_cliente VARCHAR(11) NOT NULL,
    tipo_endereco TEXT,
    endereco TEXT
);

--Fiz uma alteração para evitar o uso de SERIAL já que temos restrições
ALTER TABLE cliente_endereco ALTER COLUMN id_endereco TYPE INTEGER;
ALTER TABLE cliente_endereco  ADD CONSTRAINT fk_cliente FOREIGN KEY (cpf_cliente) REFERENCES clientes(cpf_cliente);


--7. Ok

-- Alterar o tipo da coluna tipo_endereco para VARCHAR(1)
ALTER TABLE cliente_endereco ALTER COLUMN tipo_endereco TYPE VARHAR(1);

--Simplifiquei os nomes do tipos de endereço.
ALTER TABLE cliente_endereco ADD CONSTRAINT check_tipo_endereco CHECK(tipo_endereco IN('T', 'T', 'O'));


--8. Ok

CREATE TABLE medicamentos(
    nome VARCHAR(20) NOT NULL PRIMARY KEY,
    necessita_receita BOOLEAN NOT NULL,
    preco DECIMAL(10,2) NOT NULL
);


--9. Ok

CREATE TABLE entregas (
    id_entrega INTEGER PRIMARY KEY, 
    id_endereco INTEGER NOT NULL, 
    data_entrega DATE NOT NULL, 
    status VARCHAR(20) NOT NULL
);

ALTER TABLE entregas ADD CONSTRAINT fk_endereco FOREIGN KEY (id_endereco) REFERENCES cliente_endereco(id_endereco);

-- Status pode ser: E= Entregue, C = Cancelada, A = A caminho.
ALTER TABLE entregas ALTER COLUMN status TYPE VARCHAR(1);
ALTER TABLE entregas ADD CONSTRAINT check_status CHECK(status IN('E','C','A'));


--10. Ok

CREATE TABLE vendas (
    id_venda INTEGER PRIMARY KEY,
    cpf_cliente VARCHAR(11),  -- Pode ser NULL para clientes não cadastrados
    nome_cliente VARCHAR(100), -- Nome do cliente para não cadastrados
    data_venda DATE NOT NULL,
    valor NUMERIC(10, 2) NOT NULL
);

-- Caso seja um cliente cadastrado, irá gerar uma relação com cliente.
ALTER TABLE vendas ADD CONSTRAINT fk_cliente_venda FOREIGN KEY (cpf_cliente) REFERENCES clientes(cpf_cliente);

-- Adicionei a constraint abaixo para que caso o cliente não passe o CPF seja necessário o nome e vice versa.
ALTER TABLE vendas ADD CONSTRAINT check_cliente CHECK (
    (cpf_cliente IS NOT NULL AND nome_cliente IS NULL) OR 
    (cpf_cliente IS NULL AND nome_cliente IS NOT NULL)
);

--11. Imcompleto


--Adicionei uma ligação com o funcionario na tabela vendas.
ALTER TABLE vendas ADD COLUMN cpf_funcionario VARCHAR (11) NOT NULL;

--Adicionei um CONSTRAINT para relacionar Cpf do funcionario na venda.
ALTER TABLE vendas ADD CONSTRAINT fk_cpf_funcionario FOREIGN KEY(cpf_funcionario) REFERENCES funcionarios(cpf_funcionario);

--12. Imcompleto


--13. Ok

--Criei uma nova coluna com a idade no formato DATE, após isso criei a CONSTRAINT para checar se tinha mais de 18 anos.
ALTER TABLE clientes ADD CONSTRAINT check_idade CHECK (AGE(CURRENT_DATE, data_nascimento) >= '18 years');


--14. Ok

--Bairro agora é unico.
ALTER TABLE farmacia ADD CONSTRAINT bairro_unico UNIQUE(bairro);


--15. Ok

--Criei uma coluna auxiliar para caso for uma sede:
ALTER TABLE farmacia ADD COLUMN is_sede BOOLEAN;

--Após isso criei um UPDATE para atualizar o is_sede no caso de o TIPO ser 'S';
UPDATE farmacia SET is_sede=(tipo='S');

--Tentei Criar uma CONSTRAINT que ira verificar se a farmacia é uma sede, usando Exclude para ela ser a unica.
ALTER TABLE farmacia ADD CONSTRAINT sede_unica EXCLUDE USING GIST(is_sede WITH =) WHERE (is_sede);


--16. Imcompleto

ALTER TABLE funcionar

--17. Ok

--Criei uma relação do nome do medicamento e o nome dele em venda, adicionei ambos como UNIQUE.
ALTER TABLE vendas ADD COLUMN nome_medicamento VARCHAR(20) NOT NULL;
ALTER TABLE vendas ADD CONSTRAINT fk_nome_medicamento FOREIGN KEY (nome_medicamento) REFERENCES medicamentos(nome);
ALTER TABLE medicamentos ADD CONSTRAINT unique_nome UNIQUE (nome);
ALTER TABLE clientes ADD CONSTRAINT unique_cpf UNIQUE (cpf_cliente);

18. 

